package com.wongcu.graph;

import java.util.LinkedList;
import java.util.Queue;

public class No200 {

    public static void main(String[] args) {
        Solution s = new Solution();
        int i = s.numIslands(new char[][]{
                {'1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '1', '1'},
                {'0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0'},
                {'1', '0', '1', '1', '1', '0', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                {'1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                {'1', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                {'1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1'},
                {'0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1', '1', '1'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                {'0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                {'1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1'},
                {'1', '0', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'}});
        System.out.println(i);
    }

    static class Solution {
        public int numIslands(char[][] grid) {
            if (grid == null || grid.length == 0) {
                return 0;
            }
            final char WATER = '0';
            final char LAND = '1';
            final int ROW_COUNT = grid.length;
            final int COLUMN_COUNT = grid[0].length;
            int cnt = 0;
            for (int r = 0; r < ROW_COUNT; r++) {
                for (int c = 0; c < COLUMN_COUNT; c++) {
                    if (grid[r][c] == LAND) {
                        cnt++;
                        Queue<Integer> queue = new LinkedList<>();
                        queue.add(r * COLUMN_COUNT + c);
                        grid[r][c] = WATER;
                        while (!queue.isEmpty()) {
                            int idx = queue.poll();
                            int row = idx / COLUMN_COUNT;
                            int column = idx % COLUMN_COUNT;

                            //上
                            if (row - 1 >= 0 && grid[row - 1][column] == LAND) {
                                grid[row - 1][column] = WATER;
                                queue.add(idx - COLUMN_COUNT);
                            }
                            //下
                            if (row + 1 < ROW_COUNT && grid[row + 1][column] == LAND) {
                                grid[row + 1][column] = WATER;
                                queue.add(idx + COLUMN_COUNT);
                            }
                            //左
                            if (column - 1 >= 0 && grid[row][column - 1] == LAND) {
                                grid[row][column - 1] = WATER;
                                queue.add(idx - 1);
                            }
                            //右
                            if (column + 1 < COLUMN_COUNT && grid[row][column + 1] == LAND) {
                                grid[row][column + 1] = WATER;
                                queue.add(idx + 1);
                            }
                        }
                    }
                }
            }
            return cnt;
        }
    }
}
